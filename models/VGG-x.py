import tensorflow as tf

def VGG16_3D():
    return tf.keras.Sequential([tf.keras.layers.Conv3D(filters=64, kernel_size=(3,5,5), use_bias=True, padding='same', activation="relu"),
                             tf.keras.layers.BatchNormalization(),
                             tf.keras.layers.Conv3D(filters=64, kernel_size=(3,5,5), use_bias=True, padding='same', activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                             tf.keras.layers.BatchNormalization(),
                             tf.keras.layers.MaxPool3D(pool_size=(2,2,1)),
                             tf.keras.layers.Conv3D(filters=128, kernel_size=(3,5,5), use_bias=True, padding='same', activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                             tf.keras.layers.BatchNormalization(),
                             tf.keras.layers.Conv3D(filters=128, kernel_size=(3,5,5), use_bias=True, padding='same', activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                             tf.keras.layers.BatchNormalization(),
                             tf.keras.layers.MaxPool3D(pool_size=(2,2,1)),
                             tf.keras.layers.Conv3D(filters=256, kernel_size=(3,5,4), use_bias=True, padding='same', activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                             tf.keras.layers.BatchNormalization(),
                             tf.keras.layers.Conv3D(filters=256, kernel_size=(3,5,4), use_bias=True, padding='same', activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                             tf.keras.layers.BatchNormalization(),
                             tf.keras.layers.Conv3D(filters=256, kernel_size=(3, 5, 4), use_bias=True,
                                                    padding='same', activation="relu",
                                                    kernel_initializer=tf.keras.initializers.HeNormal()),
                             tf.keras.layers.BatchNormalization(),
                             tf.keras.layers.MaxPool3D(pool_size=(2,2,1)),
                             tf.keras.layers.Conv3D(filters=512, kernel_size=(3,5,3), use_bias=True, padding='same', activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                             tf.keras.layers.BatchNormalization(),
                             tf.keras.layers.Conv3D(filters=512, kernel_size=(3,5,3), use_bias=True, padding='same', activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                             tf.keras.layers.BatchNormalization(),
                             tf.keras.layers.Conv3D(filters=512, kernel_size=(3,5,3), use_bias=True, padding='same', activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                             tf.keras.layers.BatchNormalization(),
                             tf.keras.layers.MaxPool3D(pool_size=(2,2,2)),
                             tf.keras.layers.Conv3D(filters=512, kernel_size=(3, 5, 3), use_bias=True,
                                                    padding='same', activation="relu",
                                                    kernel_initializer=tf.keras.initializers.HeNormal()),
                             tf.keras.layers.BatchNormalization(),
                             tf.keras.layers.Conv3D(filters=512, kernel_size=(3, 5, 3), use_bias=True,
                                                    padding='same', activation="relu",
                                                    kernel_initializer=tf.keras.initializers.HeNormal()),
                             tf.keras.layers.BatchNormalization(),
                             tf.keras.layers.Conv3D(filters=512, kernel_size=(3, 5, 3), use_bias=True,
                                                    padding='same', activation="relu",
                                                    kernel_initializer=tf.keras.initializers.HeNormal()),
                             tf.keras.layers.BatchNormalization(),
                             tf.keras.layers.MaxPool3D(pool_size=(2, 2, 2)),
                             tf.keras.layers.Flatten(),
                             tf.keras.layers.Dense(2048, activation='relu'),
                             tf.keras.layers.BatchNormalization(),
                             tf.keras.layers.Dropout(0.5),
                             tf.keras.layers.Dense(2048, activation='relu'),
                             tf.keras.layers.BatchNormalization(),
                             tf.keras.layers.Dropout(0.5),
                             tf.keras.layers.Dense(4, activation='softmax')])

def VGG_19_3D():
    return tf.keras.Sequential([tf.keras.layers.Conv3D(filters=64, kernel_size=(3, 5, 5),
                                                       use_bias=True, padding='same', activation="relu"),
                                tf.keras.layers.BatchNormalization(),
                                tf.keras.layers.Conv3D(filters=64, kernel_size=(3, 5, 5), use_bias=True, padding='same',
                                                       activation="relu",
                                                       kernel_initializer=tf.keras.initializers.HeNormal()),
                                tf.keras.layers.BatchNormalization(),
                                tf.keras.layers.MaxPool3D(pool_size=(2, 2, 1)),
                                tf.keras.layers.Conv3D(filters=128, kernel_size=(3, 5, 5), use_bias=True,
                                                       padding='same', activation="relu",
                                                       kernel_initializer=tf.keras.initializers.HeNormal()),
                                tf.keras.layers.BatchNormalization(),
                                tf.keras.layers.Conv3D(filters=128, kernel_size=(3, 5, 5), use_bias=True,
                                                       padding='same', activation="relu",
                                                       kernel_initializer=tf.keras.initializers.HeNormal()),
                                tf.keras.layers.BatchNormalization(),
                                tf.keras.layers.MaxPool3D(pool_size=(2, 2, 1)),
                                tf.keras.layers.Conv3D(filters=256, kernel_size=(3, 5, 4), use_bias=True,
                                                       padding='same', activation="relu",
                                                       kernel_initializer=tf.keras.initializers.HeNormal()),
                                tf.keras.layers.BatchNormalization(),
                                tf.keras.layers.Conv3D(filters=256, kernel_size=(3, 5, 4), use_bias=True,
                                                       padding='same', activation="relu",
                                                       kernel_initializer=tf.keras.initializers.HeNormal()),
                                tf.keras.layers.BatchNormalization(),
                                tf.keras.layers.Conv3D(filters=256, kernel_size=(3, 5, 4), use_bias=True,
                                                       padding='same', activation="relu",
                                                       kernel_initializer=tf.keras.initializers.HeNormal()),
                                tf.keras.layers.BatchNormalization(),
                                tf.keras.layers.Conv3D(filters=256, kernel_size=(3, 5, 4), use_bias=True,
                                                       padding='same', activation="relu",
                                                       kernel_initializer=tf.keras.initializers.HeNormal()),
                                tf.keras.layers.BatchNormalization(),
                                tf.keras.layers.MaxPool3D(pool_size=(2, 2, 1)),
                                tf.keras.layers.Conv3D(filters=512, kernel_size=(3, 5, 3), use_bias=True,
                                                       padding='same', activation="relu",
                                                       kernel_initializer=tf.keras.initializers.HeNormal()),
                                tf.keras.layers.BatchNormalization(),
                                tf.keras.layers.Conv3D(filters=512, kernel_size=(3, 5, 3), use_bias=True,
                                                       padding='same', activation="relu",
                                                       kernel_initializer=tf.keras.initializers.HeNormal()),
                                tf.keras.layers.BatchNormalization(),
                                tf.keras.layers.Conv3D(filters=512, kernel_size=(3, 5, 3), use_bias=True,
                                                       padding='same', activation="relu",
                                                       kernel_initializer=tf.keras.initializers.HeNormal()),
                                tf.keras.layers.BatchNormalization(),
                                tf.keras.layers.Conv3D(filters=512, kernel_size=(3, 5, 3), use_bias=True,
                                                       padding='same', activation="relu",
                                                       kernel_initializer=tf.keras.initializers.HeNormal()),
                                tf.keras.layers.BatchNormalization(),
                                tf.keras.layers.MaxPool3D(pool_size=(2, 2, 2)),
                                tf.keras.layers.Conv3D(filters=512, kernel_size=(3, 5, 3), use_bias=True,
                                                       padding='same', activation="relu",
                                                       kernel_initializer=tf.keras.initializers.HeNormal()),
                                tf.keras.layers.BatchNormalization(),
                                tf.keras.layers.Conv3D(filters=512, kernel_size=(3, 5, 3), use_bias=True,
                                                       padding='same', activation="relu",
                                                       kernel_initializer=tf.keras.initializers.HeNormal()),
                                tf.keras.layers.BatchNormalization(),
                                tf.keras.layers.Conv3D(filters=512, kernel_size=(3, 5, 3), use_bias=True,
                                                       padding='same', activation="relu",
                                                       kernel_initializer=tf.keras.initializers.HeNormal()),
                                tf.keras.layers.BatchNormalization(),
                                tf.keras.layers.Conv3D(filters=512, kernel_size=(3, 5, 3), use_bias=True,
                                                       padding='same', activation="relu",
                                                       kernel_initializer=tf.keras.initializers.HeNormal()),
                                tf.keras.layers.BatchNormalization(),
                                tf.keras.layers.MaxPool3D(pool_size=(2, 2, 2)),
                                tf.keras.layers.Flatten(),
                                tf.keras.layers.Dense(2048, activation='relu'),
                                tf.keras.layers.BatchNormalization(),
                                tf.keras.layers.Dropout(0.5),
                                tf.keras.layers.Dense(2048, activation='relu'),
                                tf.keras.layers.BatchNormalization(),
                                tf.keras.layers.Dropout(0.5),
                                tf.keras.layers.Dense(4, activation='softmax')])

def vgg19_2D():
    return tf.keras.Sequential([tf.keras.layers.Conv2D(filters=64, kernel_size=(6, 8),
                                                       use_bias=True, padding='same', activation="relu"),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.Conv2D(filters=64, kernel_size=(3, 4), use_bias=True, padding='same',
                                                        activation="relu",
                                                        kernel_initializer=tf.keras.initializers.HeNormal()),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                                 tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 4), use_bias=True, padding='same',
                                                        activation="relu",
                                                        kernel_initializer=tf.keras.initializers.HeNormal()),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 4), use_bias=True, padding='same',
                                                        activation="relu",
                                                        kernel_initializer=tf.keras.initializers.HeNormal()),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                                 tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                                        activation="relu",
                                                        kernel_initializer=tf.keras.initializers.HeNormal()),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                                        activation="relu",
                                                        kernel_initializer=tf.keras.initializers.HeNormal()),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                                        activation="relu",
                                                        kernel_initializer=tf.keras.initializers.HeNormal()),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                                        activation="relu",
                                                        kernel_initializer=tf.keras.initializers.HeNormal()),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                                 tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                                        activation="relu",
                                                        kernel_initializer=tf.keras.initializers.HeNormal()),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                                        activation="relu",
                                                        kernel_initializer=tf.keras.initializers.HeNormal()),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                                        activation="relu",
                                                        kernel_initializer=tf.keras.initializers.HeNormal()),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                                        activation="relu",
                                                        kernel_initializer=tf.keras.initializers.HeNormal()),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                                 tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                                        activation="relu",
                                                        kernel_initializer=tf.keras.initializers.HeNormal()),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                                        activation="relu",
                                                        kernel_initializer=tf.keras.initializers.HeNormal()),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                                        activation="relu",
                                                        kernel_initializer=tf.keras.initializers.HeNormal()),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                                        activation="relu",
                                                        kernel_initializer=tf.keras.initializers.HeNormal()),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.MaxPool2D(pool_size=(3, 4)),

                                 tf.keras.layers.Flatten(),
                                 tf.keras.layers.Dense(4096, activation='selu'),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.Dropout(0.5),
                                 tf.keras.layers.Dense(4096, activation='selu'),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.Dropout(0.5),
                                 tf.keras.layers.Dense(4, activation='softmax')])

def vgg16_2D():
    return tf.keras.Sequential([tf.keras.layers.Conv2D(filters=64, kernel_size=(6, 8),
                                                       use_bias=True, padding='same', activation="relu"),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.Conv2D(filters=64, kernel_size=(3, 4), use_bias=True, padding='same',
                                                        activation="relu",
                                                        kernel_initializer=tf.keras.initializers.HeNormal()),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.MaxPool2D(pool_size=(2, 2)),
                                 tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 4), use_bias=True, padding='same',
                                                        activation="relu",
                                                        kernel_initializer=tf.keras.initializers.HeNormal()),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 4), use_bias=True, padding='same',
                                                        activation="relu",
                                                        kernel_initializer=tf.keras.initializers.HeNormal()),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.MaxPool2D(pool_size=(2, 2)),
                                 tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                                        activation="relu",
                                                        kernel_initializer=tf.keras.initializers.HeNormal()),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                                        activation="relu",
                                                        kernel_initializer=tf.keras.initializers.HeNormal()),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True,
                                                        padding='same', activation="relu",
                                                        kernel_initializer=tf.keras.initializers.HeNormal()),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.MaxPool2D(pool_size=(2, 2)),
                                 tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                                        activation="relu",
                                                        kernel_initializer=tf.keras.initializers.HeNormal()),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                                        activation="relu",
                                                        kernel_initializer=tf.keras.initializers.HeNormal()),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                                        activation="relu",
                                                        kernel_initializer=tf.keras.initializers.HeNormal()),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.MaxPool2D(pool_size=(2, 2)),
                                 tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True,
                                                        padding='same', activation="relu",
                                                        kernel_initializer=tf.keras.initializers.HeNormal()),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True,
                                                        padding='same', activation="relu",
                                                        kernel_initializer=tf.keras.initializers.HeNormal()),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True,
                                                        padding='same', activation="relu",
                                                        kernel_initializer=tf.keras.initializers.HeNormal()),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.MaxPool2D(pool_size=(3, 4)),
                                 tf.keras.layers.Flatten(),
                                 tf.keras.layers.Dense(4096, activation='relu'),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.Dropout(0.5),
                                 tf.keras.layers.Dense(4096, activation='relu'),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.Dropout(0.5),
                                 tf.keras.layers.Dense(4, activation='softmax')])

def multi_vgg19_2D():
    class multi_VGG(tf.keras.Model):
        def __init__(self, **kwargs):
            super().__init__(**kwargs)

            self.hiddens1 = [
                tf.keras.layers.Conv2D(input_shape=(240, 320, 1), filters=64, kernel_size=(6, 8), use_bias=True,
                                       padding='same', activation="relu",
                                       kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=64, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same', strides=2,
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same', strides=2,
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(3, 4))]

            self.hiddens2 = [
                tf.keras.layers.Conv2D(input_shape=(240, 320, 1), filters=64, kernel_size=(6, 8), use_bias=True,
                                       padding='same', activation="relu",
                                       kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=64, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same', strides=2,
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same', strides=2,
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(3, 4))]

            self.hiddens3 = [
                tf.keras.layers.Conv2D(input_shape=(240, 320, 1), filters=64, kernel_size=(6, 8), use_bias=True,
                                       padding='same', activation="relu",
                                       kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=64, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same', strides=2,
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same', strides=2,
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(3, 4))]

            self.hiddens4 = [
                tf.keras.layers.Conv2D(input_shape=(240, 320, 1), filters=64, kernel_size=(6, 8), use_bias=True,
                                       padding='same', activation="relu",
                                       kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=64, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same', strides=2,
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same', strides=2,
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(3, 4))]

            self.hiddens5 = [
                tf.keras.layers.Conv2D(input_shape=(240, 320, 1), filters=64, kernel_size=(6, 8), use_bias=True,
                                       padding='same', activation="relu",
                                       kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=64, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same', strides=2,
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same', strides=2,
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(3, 4))]

            self.hiddens6 = [
                tf.keras.layers.Conv2D(input_shape=(240, 320, 1), filters=64, kernel_size=(6, 8), use_bias=True,
                                       padding='same', activation="relu",
                                       kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=64, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same', strides=2,
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same', strides=2,
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(3, 4))]

            self.hiddens7 = [
                tf.keras.layers.Conv2D(input_shape=(240, 320, 1), filters=64, kernel_size=(6, 8), use_bias=True,
                                       padding='same', activation="relu",
                                       kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=64, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same', strides=2,
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same', strides=2,
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(3, 4))]

            self.hiddens8 = [
                tf.keras.layers.Conv2D(input_shape=(240, 320, 1), filters=64, kernel_size=(6, 8), use_bias=True,
                                       padding='same', activation="relu",
                                       kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=64, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same', strides=2,
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same', strides=2,
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(3, 4))]

            self.hiddens9 = [
                tf.keras.layers.Conv2D(input_shape=(240, 320, 1), filters=64, kernel_size=(6, 8), use_bias=True,
                                       padding='same', activation="relu",
                                       kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=64, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same', strides=2,
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same', strides=2,
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(3, 4))]

            self.hiddens10 = [
                tf.keras.layers.Conv2D(input_shape=(240, 320, 1), filters=64, kernel_size=(6, 8), use_bias=True,
                                       padding='same', activation="relu",
                                       kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=64, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same', strides=2,
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(2, 2)),

                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same', strides=2,
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.Conv2D(filters=512, kernel_size=(3, 4), use_bias=True, padding='same',
                                       activation="relu", kernel_initializer=tf.keras.initializers.HeNormal()),
                tf.keras.layers.BatchNormalization(),
                tf.keras.layers.MaxPool2D(pool_size=(3, 4))]

            self.dense_layers = [tf.keras.layers.Flatten(),
                                 tf.keras.layers.Dense(units=4096, activation='selu',
                                                       kernel_initializer='lecun_normal'),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.Dropout(0.5),
                                 tf.keras.layers.Dense(units=4096, activation='selu',
                                                       kernel_initializer='lecun_normal'),
                                 tf.keras.layers.BatchNormalization(),
                                 tf.keras.layers.Dropout(0.5),
                                 tf.keras.layers.Dense(units=4, activation='softmax')]

        def call(self, inputs):
            input1 = tf.convert_to_tensor(inputs[:, :, :, 0, 0:])
            input2 = tf.convert_to_tensor(inputs[:, :, :, 1, 0:])
            input3 = tf.convert_to_tensor(inputs[:, :, :, 2, 0:])
            input4 = tf.convert_to_tensor(inputs[:, :, :, 3, 0:])
            input5 = tf.convert_to_tensor(inputs[:, :, :, 4, 0:])
            input6 = tf.convert_to_tensor(inputs[:, :, :, 5, 0:])
            input7 = tf.convert_to_tensor(inputs[:, :, :, 6, 0:])
            input8 = tf.convert_to_tensor(inputs[:, :, :, 7, 0:])
            input9 = tf.convert_to_tensor(inputs[:, :, :, 8, 0:])
            input10 = tf.convert_to_tensor(inputs[:, :, :, 9, 0:])

            output1 = self.hiddens1[0](input1)
            for layer in self.hiddens1[1:]:
                output1 = layer(output1)

            output2 = self.hiddens2[0](input2)
            for layer in self.hiddens2[1:]:
                output2 = layer(output2)

            output3 = self.hiddens3[0](input3)
            for layer in self.hiddens3[1:]:
                output3 = layer(output3)

            output4 = self.hiddens4[0](input4)
            for layer in self.hiddens4[1:]:
                output4 = layer(output4)

            output5 = self.hiddens5[0](input5)
            for layer in self.hiddens5[1:]:
                output5 = layer(output5)

            output6 = self.hiddens6[0](input6)
            for layer in self.hiddens6[1:]:
                output6 = layer(output6)

            output7 = self.hiddens7[0](input7)
            for layer in self.hiddens7[1:]:
                output7 = layer(output7)

            output8 = self.hiddens8[0](input8)
            for layer in self.hiddens8[1:]:
                output8 = layer(output8)

            output9 = self.hiddens9[0](input9)
            for layer in self.hiddens9[1:]:
                output9 = layer(output9)

            output10 = self.hiddens10[0](input10)
            for layer in self.hiddens10[1:]:
                output10 = layer(output10)

            concat = tf.keras.layers.concatenate(
                [output1, output2, output3, output4, output5, output6, output7, output8, output9, output10])

            output = self.dense_layers[0](concat)
            for layer in self.dense_layers[1:]:
                output = layer(output)

            return output

    return multi_VGG